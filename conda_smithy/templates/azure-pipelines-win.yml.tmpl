# This file was generated automatically from conda-smithy. To update this configuration,
# update the conda-forge.yml and/or the recipe/meta.yaml.
# -*- mode: yaml -*-

jobs:
- job: win
  {{ azure_yaml|indent(2) }}
  steps:
{%- if clone_depth is not none %}
    - checkout: self
      fetchDepth: {{ clone_depth }}
{%- endif %}
{%- if azure.free_disk_space %}
    - powershell: |
{%- if (azure.free_disk_space == true) or ('cache' in azure.free_disk_space) %}
        $cleanup_dirs = @(
            "C:\hostedtoolcache\windows"
        )

        $robocopy_flags = @(
            "/purge", "/r:0", "/w:0", "/mt"
            "/ns", "/nc", "/np", "/nfl", "/ndl", "/njh", "/njs"
        )
        $empty_dir = "C:\empty"
        mkdir $empty_dir 2>&1>$null
        foreach ($d in $cleanup_dirs) {
            if ($d -and (Test-Path $d)) {
                echo "Removing $d"
                robocopy @robocopy_flags $empty_dir $d 2>&1>$null
                Remove-Item -Path $d -Recurse -Force
            }
        }
        Remove-Item -Path $empty_dir -Recurse -Force
{%- endif %}
      displayName: Manage disk space
{%- endif %}
{%- for choco_pkg in choco %}
    - script: |
        choco install {{ choco_pkg }} -fdv -y --debug
      displayName: "Install Chocolatey Package: {{ choco_pkg }}"
{% endfor %}

    - powershell: |
        Invoke-WebRequest $env:MINIFORGE_URL -OutFile $env:MINIFORGE_PATH
      displayName: "Download Miniforge"
      env:
        MINIFORGE_URL: https://github.com/conda-forge/miniforge/releases/latest/download/Mambaforge-Windows-x86_64.exe
        MINIFORGE_PATH: $(Build.ArtifactStagingDirectory)/Miniforge.exe

    - script: |
        start /wait "" %BUILD_ARTIFACTSTAGINGDIRECTORY%\Miniforge.exe /InstallationType=JustMe /RegisterPython=0 /S /D=C:\Miniforge
      displayName: Install Miniforge

    - powershell: Write-Host "##vso[task.prependpath]C:\Miniforge\Scripts"
      displayName: Add conda to PATH

    - script: |
        call ".scripts\run_win_build.bat"
      displayName: Run Windows build
      env:
        PYTHONUNBUFFERED: 1
        CONFIG: $(CONFIG)
        CI: azure
        flow_run_id: azure_$(Build.BuildNumber).$(System.JobAttempt)
        remote_url: $(Build.Repository.Uri)
        sha: $(Build.SourceVersion)
        UPLOAD_PACKAGES: $(UPLOAD_PACKAGES)
        UPLOAD_TEMP: $(UPLOAD_TEMP)
{%- if upload_on_branch %}
        UPLOAD_ON_BRANCH: {{ upload_on_branch }}
{%- endif %}
{%- for secret in secrets %}
        {{ secret }}: $({{ secret }})
{%- endfor %}

{%- if azure.store_build_artifacts %}
    - script: |
        set CI=azure
        set CI_RUN_ID=$(build.BuildNumber).$(system.JobAttempt)
        set FEEDSTOCK_NAME=$(build.Repository.Name)
        set ARTIFACT_STAGING_DIR=$(Build.ArtifactStagingDirectory)
        set CONDA_BLD_DIR=$(CONDA_BLD_PATH)
        set BLD_ARTIFACT_PREFIX=conda_artifacts
        if "%AGENT_JOBSTATUS%" == "Failed" (
            set ENV_ARTIFACT_PREFIX=conda_envs
        )
        call ".scripts\create_conda_build_artifacts.bat"
      displayName: Prepare conda build artifacts
      condition: succeededOrFailed()

    - task: PublishPipelineArtifact@1
      displayName: Store conda build artifacts
      condition: not(eq(variables.BLD_ARTIFACT_PATH, ''))
      inputs:
        targetPath: $(BLD_ARTIFACT_PATH)
        artifactName: $(BLD_ARTIFACT_NAME)

    - task: PublishPipelineArtifact@1
      displayName: Store conda build environment artifacts
      condition: not(eq(variables.ENV_ARTIFACT_PATH, ''))
      inputs:
        targetPath: $(ENV_ARTIFACT_PATH)
        artifactName: $(ENV_ARTIFACT_NAME)
{%- endif %}
